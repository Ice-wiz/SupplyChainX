mutation createUserWithCredentials(
  $createUserWithCredentialsInput: CreateUserWithCredentialsInput!
) {
  createUserWithCredentials(
    createUserWithCredentialsInput: $createUserWithCredentialsInput
  ) {
    uid
  }
}

mutation CreateUserWithProvider(
  $createUserWithProviderInput: CreateUserWithProviderInput!
) {
  createUserWithProvider(
    createUserWithProviderInput: $createUserWithProviderInput
  ) {
    uid
  }
}

query getCredentials($email: String!) {
  getCredentials(email: $email) {
    uid
    name
    image
    credentials {
      email
      passwordHash
    }
  }
}

query GetAuthProvider($uid: String!) {
  getAuthProvider(uid: $uid) {
    uid
    type
  }
}

query distributorMe {
  distributorMe {
    uid
    createdAt
    user {
      image
      name
    }
    warehouses {
      name
      id
    }
  }
}
query retailerMe {
  retailerMe {
    uid
    createdAt
    user {
      image
      name
    }
    warehouses {
      name
      id
    }
  }
}

query manufacturerMe {
  manufacturerMe {
    uid
    createdAt
    user {
      image
      name
    }
    warehouses {
      name
      id
    }
    products {
      name
      id
    }
  }
}

mutation createManufacturer(
  $createManufacturerInput: CreateManufacturerInput!
) {
  createManufacturer(createManufacturerInput: $createManufacturerInput) {
    uid
  }
}

query myProducts(
  $skip: Int
  $take: Int
  $orderBy: [ProductOrderByWithRelationInput!]
  $where: ProductWhereInput
) {
  myProducts(skip: $skip, take: $take, orderBy: $orderBy, where: $where) {
    id
    name
    image
    createdAt
    description
  }
}

mutation createWarehouse($createWarehouseInput: CreateWarehouseInput!) {
  createWarehouse(createWarehouseInput: $createWarehouseInput) {
    id
  }
}

mutation createProduct($createProductInput: CreateProductInput!) {
  createProduct(createProductInput: $createProductInput) {
    id
  }
}

mutation createInventory($createInventoryInput: CreateInventoryInput!) {
  createInventory(createInventoryInput: $createInventoryInput) {
    id
  }
}

mutation createDistributor($createDistributorInput: CreateDistributorInput!) {
  createDistributor(createDistributorInput: $createDistributorInput) {
    uid
  }
}

mutation createRetailer($createRetailerInput: CreateRetailerInput!) {
  createRetailer(createRetailerInput: $createRetailerInput) {
    uid
  }
}

mutation transferInventory(
  $fromWarehouseId: Int!
  $toWarehouseId: Int!
  $productId: Int!
  $quantity: Int!
) {
  transferInventory(
    fromWarehouseId: $fromWarehouseId
    toWarehouseId: $toWarehouseId
    productId: $productId
    quantity: $quantity
  ) {
    id
  }
}

mutation reduceInventory(
  $warehouseId: Int!
  $productId: Int!
  $quantity: Int!
) {
  reduceInventory(
    warehouseId: $warehouseId
    productId: $productId
    quantity: $quantity
  ) {
    id
  }
}

query product($where: ProductWhereUniqueInput!) {
  product(where: $where) {
    name
    description
    createdAt
    transactions {
      id
      quantity
      toWarehouse {
        id
        location {
          latitude
          longitude
          id
        }
      }
      fromWarehouse {
        id
        location {
          latitude
          longitude
          id
        }
      }
    }
    inventories {
      id
      warehouse {
        manufacturer {
          uid
        }
        distributor {
          uid
        }
        retailer {
          uid
        }
        location {
          latitude
          longitude
          id
        }
      }
      quantity
    }
  }
}

mutation reduceInventory(
  $warehouseId: Int!
  $productId: Int!
  $quantity: Int!
) {
  reduceInventory(
    warehouseId: $warehouseId
    productId: $productId
    quantity: $quantity
  ) {
    id
  }
}

fragment TransactionDetails on Transaction {
  id
  quantity
  toWarehouse {
    name
    id
  }
  fromWarehouse {
    name
    id
  }
  createdAt
  product {
    name
    image
    id
  }
}

query myTransactions(
  $skip: Int
  $take: Int
  $cursor: TransactionWhereUniqueInput
  $orderBy: [TransactionOrderByWithRelationInput!]
  $where: TransactionWhereInput
  $distinct: [TransactionScalarFieldEnum!]
) {
  myTransactions(
    skip: $skip
    take: $take
    cursor: $cursor
    orderBy: $orderBy
    where: $where
    distinct: $distinct
  ) {
    ...TransactionDetails
  }
}

query myWarehouses(
  $skip: Int
  $take: Int
  $orderBy: [WarehouseOrderByWithRelationInput!]
  $where: WarehouseWhereInput
) {
  myWarehouses(skip: $skip, take: $take, orderBy: $orderBy, where: $where) {
    id
    name
    description
    createdAt
    location {
      address
      latitude
      longitude
    }
    ins {
      ...TransactionDetails
    }
    outs {
      ...TransactionDetails
    }
    inventories {
      quantity
      product {
        name
        image
        id
      }
    }
  }
}

query warehouse($where: WarehouseWhereUniqueInput!) {
  warehouse(where: $where) {
    id
    name
    description
    createdAt
    location {
      address
      latitude
      longitude
    }
    ins {
      ...TransactionDetails
    }
    outs {
      ...TransactionDetails
    }
    inventories {
      quantity
      product {
        name
        image
        id
      }
    }
  }
}
